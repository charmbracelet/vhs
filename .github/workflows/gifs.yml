name: comment

on:
  pull_request:
    paths:
      - 'examples/**/*.tape'

jobs:
  matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          list-files: json
          filters: |
            tape:
              - added|modified: 'examples/**/*.tape'
      - id: set-matrix
        run: |
          # Here we assume the gif output is going to be the same as the tape file path
          echo "matrix={\"include\":$(echo '${{ steps.changes.outputs.tape_files }}' | jq -r 'to_entries | map({ path: .value, out: .value | sub(".tape"; ".gif") }) | tostring')}" >> $GITHUB_OUTPUT

  gif-pr:
    needs: [matrix]
    if: ${{ needs.matrix.outputs.matrix != '' && needs.matrix.outputs.matrix != '[]' }}
    strategy:
      matrix: ${{ fromJSON(needs.matrix.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: charmbracelet/vhs-action@v1
        with:
          path: ${{ matrix.path }}
      - uses: devicons/public-upload-to-imgur@v2.2.2
        id: imgur_step
        with:
          path: './${{ matrix.out }}'
          client_id: ${{ secrets.IMGUR_CLIENT_ID }}
      - uses: actions/github-script@v6
        with:
          # This snippet is public-domain, taken from
          # https://github.com/oprypin/nightly.link/blob/master/.github/workflows/pr-comment.yml
          script: |
            async function upsertComment(owner, repo, issue_number, purpose, body) {
              const {data: comments} = await github.rest.issues.listComments(
                {owner, repo, issue_number});
              const marker = `<!-- bot: ${purpose} -->`;
              body = marker + "\n" + body;
              const existing = comments.filter((c) => c.body.includes(marker));
              if (existing.length > 0) {
                const last = existing[existing.length - 1];
                core.info(`Updating comment ${last.id}`);
                await github.rest.issues.updateComment({
                  owner, repo,
                  body,
                  comment_id: last.id,
                });
              } else {
                core.info(`Creating a comment in issue / PR #${issue_number}`);
                await github.rest.issues.createComment({issue_number, body, owner, repo});
              }
            }

            const {owner, repo} = context.repo;
            const issue_number = context.issue.number;

            const body = "VHS tape file ([`${{ matrix.path }}`](${{ matrix.path }})) has changed.\n\n" +
            `<img src="${{ fromJSON(steps.imgur_step.outputs.imgur_urls)[0] }}" width="600px" />`;
            core.info("Review thread message body:", body);
            await upsertComment(owner, repo, issue_number, "gif-commenter ${{ matrix.path }}", body);
